{
  "openapi": "3.0.1",
  "info": {
    "title": "LifeGuard API",
    "version": "1.0.0",
    "description": "Comprehensive API documentation for LifeGuard health monitoring system including .NET Core backend and Node.js microservices"
  },
  "servers": [
    {
      "url": "https://lifeguard-hiij.onrender.com",
      "description": ".NET Core Backend Server"
    },
    {
      "url": "https://lifeguard-node.onrender.com",
      "description": "Node.js Microservices Server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/login": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Authenticate user with email and password",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/register": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Register a new user account",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/forgot-password": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Initiate password recovery process",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/ResendOTP": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Resend OTP to user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendOTPCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/VerifyOTP": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Verify OTP provided by user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOTPCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/ResetPassword": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Reset user password using token",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Account/{id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve basic account information by ID",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete user account by ID",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/Account/CompleteProfile": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Complete user profile with additional details",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteProfileCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/Account/GetProfile/{id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve detailed user profile information",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/Account/UpdateProfile": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Update user profile information",
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteProfileCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/{id}/photo": {
      "post": {
        "tags": [
          "Photos"
        ],
        "summary": "Upload photo for user",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Photos"
        ],
        "summary": "Delete user photo",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Photos"
        ],
        "summary": "Get user photo",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/memos": {
      "get": {
        "tags": [
          "Memos"
        ],
        "summary": "Retrieve user memos",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Memos"
        ],
        "summary": "Create a new memo",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "completed": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/memos/undone/count": {
      "get": {
        "tags": [
          "Memos"
        ],
        "summary": "Get count of undone memos",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/emergency-contacts": {
      "get": {
        "tags": [
          "Emergency"
        ],
        "summary": "Retrieve user's emergency contacts",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Emergency"
        ],
        "summary": "Add new emergency contact",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "relationship": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/emergency-contacts/alert": {
      "post": {
        "tags": [
          "Emergency"
        ],
        "summary": "Send emergency alert to contacts",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/health-metrics/latest": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Get latest health metrics",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/health-metrics/save": {
      "post": {
        "tags": [
          "Health"
        ],
        "summary": "Save health metrics",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "heartRate": {
                    "type": "number"
                  },
                  "bloodPressure": {
                    "type": "string"
                  },
                  "temperature": {
                    "type": "number"
                  },
                  "steps": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/medications": {
      "get": {
        "tags": [
          "Medications"
        ],
        "summary": "Get all medications for user",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/medications/add": {
      "post": {
        "tags": [
          "Medications"
        ],
        "summary": "Add new medication",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/medications/track": {
      "post": {
        "tags": [
          "Medications"
        ],
        "summary": "Track medication dose",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/exercise/stats": {
      "get": {
        "tags": [
          "Exercise"
        ],
        "summary": "Get exercise statistics",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/exercise/complete": {
      "post": {
        "tags": [
          "Exercise"
        ],
        "summary": "Record completed workout",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/rag/query": {
      "post": {
        "tags": [
          "RAG System"
        ],
        "summary": "Query the RAG system",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string"
                  },
                  "context": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/rag/initialize": {
      "post": {
        "tags": [
          "RAG System"
        ],
        "summary": "Initialize RAG system (admin only)",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/api/freesound/audio-proxy": {
      "post": {
        "tags": [
          "Audio"
        ],
        "summary": "Proxy audio streaming from Freesound",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/favorite-sounds": {
      "get": {
        "tags": [
          "Audio"
        ],
        "summary": "Get all favorite sounds",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user-preferences/notifications": {
      "get": {
        "tags": [
          "User Preferences"
        ],
        "summary": "Get notification preferences",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "User Preferences"
        ],
        "summary": "Update notification preferences",
        "security": [
          {
            "Bearer": []
          }
        ],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/notifications/health": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Health check for notification service",
        "security": [],
        "servers": [
          {
            "url": "https://lifeguard-node.onrender.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompleteProfileCommand": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32"
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUserResponse": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegistrationRequest": {
        "required": [
          "email",
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 6,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "emailVerified": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "accountCreated": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ResendOTPCommand": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordRequest": {
        "required": [
          "confirmPassword",
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "minLength": 6,
            "type": "string"
          },
          "confirmPassword": {
            "minLength": 6,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Result": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean"
          },
          "statusCode": {
            "$ref": "#/components/schemas/ResultStatusCode"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "requestId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ResultStatusCode": {
        "enum": [
          200,
          201,
          400,
          401,
          403,
          404,
          406,
          409,
          422,
          424,
          500
        ],
        "type": "integer",
        "format": "int32"
      },
      "VerifyOTPCommand": {
        "required": [
          "email",
          "otp"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "otp": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}